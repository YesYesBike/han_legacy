#!/bin/perl
use utf8;
#use strict;
#use warnings;
#use Data::Dumper;
#use feature qw/
#    say
#/;
#use Switch;
use integer;
use Getopt::Std;

binmode(STDOUT, ":encoding(UTF-8)");

my @han_arr = split //,
    "ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅛㅜㅠㅡㅣ";

my %alp_num = (
    r =>  0, R =>  1, s =>  2, e =>  3, E =>  4, f =>  5,
    a =>  6, q =>  7, Q =>  8, t =>  9, T => 10, d => 11,
    w => 12, W => 13, c => 14, z => 15, x => 16, v => 17,
    g => 18, k => 19, o => 20, i => 21, O => 22, j => 23,
    p => 24, u => 25, P => 26, h => 27, y => 28, n => 29,
    b => 30, m => 31, l => 32,
);

my %jung_num = (
    ㅏ =>  0, ㅐ =>  1, ㅑ =>  2, ㅒ =>  3, ㅓ =>  4,
    ㅔ =>  5, ㅕ =>  6, ㅖ =>  7, ㅗ =>  8, ㅘ =>  9,
    ㅙ => 10, ㅚ => 11, ㅛ => 12, ㅜ => 13, ㅝ => 14,
    ㅞ => 15, ㅟ => 16, ㅠ => 17, ㅡ => 18, ㅢ => 19,
    ㅣ => 20,
);

my %jong_num = (
    ㄱ =>  0, ㄲ =>  1, ㄳ =>  2, ㄴ =>  3, ㄵ =>  4,
    ㄶ =>  5, ㄷ =>  6, ㄹ =>  7, ㄺ =>  8, ㄻ =>  9,
    ㄼ => 10, ㄽ => 11, ㄾ => 12, ㄿ => 13, ㅀ => 14,
    ㅁ => 15, ㅂ => 16, ㅄ => 17, ㅅ => 18, ㅆ => 19,
    ㅇ => 20, ㅈ => 21, ㅊ => 22, ㅋ => 23, ㅌ => 24,
    ㅍ => 25, ㅎ => 26,
);

my %jong_cho = (
    0  => 0,  1  => 1,  3  => 2,  6  => 3,  7  => 5,
    15 => 6,  16 => 7,  18 => 9,  19 => 10, 20 => 11,
    21 => 12 ,22 => 14, 23 => 15, 24 => 16, 25 => 17,
    26 => 18 ,
);

my %num_jung = reverse %jung_num;

my %double_jaeum = (   
    "0,9"  => 2,   "3,12" => 4,  "3,18" => 5,
    "7,0"  => 8,   "7,6"  => 9,  "7,7"  => 10,
    "7,9"  => 11,  "7,16" => 12, "7,17" => 13,
    "7,18" => 14,  "16,9" => 17,
);

my %jaeum_rev = reverse %double_jaeum;

my %double_moeum = (   
    "8,19"  => 9,  "8,20"  => 10, "8,32"  => 11,
    "13,23" => 14, "13,24" => 15, "13,32" => 16,
    "18,32" => 19,
);

my @ret;

my $cho;
my $jung;
my $jong;

my $clipboard;

sub char_input{
    my @arg = @_;
    my $three_out = 0;
    for (@arg){
        ($_ = -1, $three_out++) if !defined;
    }
    return if $three_out == 3;
    my $input = 0xac00 + 21*28*$arg[0] + 28*$arg[1] + $arg[2] + 1;
    push @ret, chr($input);
}

sub jaeum{
    my ($ch, $index) = @_;
    if(!defined $jung){
        if(!defined $jong){
            if(!defined $cho){
                $cho = $index;
            } else {
                push @ret, $han_arr[$cho];
                $cho = $index;
            }
        }
    } else {
        if(!defined $jong){
            if(!defined $cho){
                push @ret, $num_jung{$jung};
                undef $jung;
                $cho = $index;
            } else {
                if( defined(my $var = $jong_num{$ch}) ){
                    $jong = $var;
                } else {
                    char_input($cho, $jung, $jong);
                    undef $jung;
                    undef $jong;
                    $cho = $index;
                }
            }
        } else {
            if(defined $cho){
                if( my $temp = $double_jaeum{"$jong,$index"} ){
                    $jong = $temp;
                } else {
                    char_input($cho, $jung, $jong);
                    undef $jung;
                    undef $jong;
                    $cho = $index;
                }
            }
        }
    }
}

sub moeum{
    my ($ch, $index) = @_;

    if(!defined $cho){
        if(defined $jong){
            if(my $temp = $jaeum_rev{$jong}){
                $temp =~ /(\d+),(\d+)/;
                $jong = $1;
                char_input($cho, $jung, $jong);
                $cho = $2;
                undef $jong;
            }
        } else {
            push @ret, $ch;
        }
    } else {
        if(!defined $jong){
            if(!defined $jung){
                $jung = $jung_num{$ch};
            } else {
                if(my $temp = $double_moeum{"$jung,$index"}){
                    $jung = $temp;
                } else {
                    char_input($cho, $jung, $jong);
                    undef $cho;
                    undef $jung;
                    push @ret, $ch;
                }
            }
        } else {
            my $cho_temp;
            my $jong_temp;
            if(my $temp = $jaeum_rev{$jong}){
                $temp =~ /(\d+),(\d+)/;
                $jong = $1;
                $cho_temp = $2;
                char_input($cho, $jung, $jong);
                undef $jong;
            } else {
                $jong_temp = $jong;
                undef $jong;
                char_input($cho, $jung, $jong);
            }

            if(defined $cho_temp){
                $cho = $cho_temp;
            } else {
                $cho = $jong_cho{$jong_temp};
            }
            $jung = $jung_num{$ch};
        }
    }
}

sub hangul{
    my $input = shift;

    for my $ch_src(split //, $input){
        my $index = $alp_num{$ch_src};
        my $ch = $han_arr[$index] if defined $index;

        if(!defined $index){
            char_input($cho, $jung, $jong);
            undef $cho;
            undef $jung;
            undef $jong;
            push @ret, $ch_src;
            next;
        }

        if($index < 19){
            jaeum($ch, $index);
        } else {
            moeum($ch, $index);
        }
    }

    if(defined $cho){
        if(defined $jung){
            char_input($cho, $jung, $jong);
        } else {
            push @ret, $han_arr[$cho];
        }
    } else {
        if(defined $jung){
            push @ret, $jung_num{$jung};
        } else {
            push @ret, $jong_num{$jong} if(defined $jong);
        }
    }

    undef $cho;
    undef $jung;
    undef $jong;

    print join '', @ret;
    undef @ret;
}

sub hear{
    my $string = shift;
    my ($white, $leader);
    if($string =~ /^\s*(?:([^\w\s]+)(\s*).*\n)(?:\s*\1\2?.*\n)+$/){
        ($white, $leader) = ($2, quotemeta($1));
    } else {
        ($white, $leader) = (/^(\s+)/, '');
    }
    $string =~ s/^\s*?$leader(?:$white)?//gm;
    $string;
}

sub schelp{
    print hear <<"    EOF1"
    @@@ <알파벳-한글 변환기 쉘 도움말>
    @@@ :q - 종료
    @@@ :h - 도움말
    @@@ :c - 화면 지우기
    EOF1
}

sub schell{
    print "알파벳-한글 변환기(:h 도움말, :q 종료)\n> ";
    while(<STDIN>){
        chomp;
        if(/^:q$/){
            exit;
        } elsif(/^:h$/){
            schelp;
        } elsif(/^:c$/){
            system('clear');
        } else {
            hangul $_;
            print "\n";
        }
        print "> ";
    }
}

sub help{
    print hear <<"    EOF2";
    @@@ <알파벳-한글 변환기 도움말>
    @@@ *옵션이 없으면 대화형 쉘을 실행
    @@@ 
    @@@ -c:             결과물을 클립보드로 출력(xsel)
    @@@ -f <파일이름>:  파일을 한글로 변환
    @@@ -h:             도움말
    @@@ -s:             STDIN을 입력으로 받음
    @@@ -t <전달인자>:  STDIN이 아닌 전달인자를 한글로 출력
    @@@ -v:             버전
    @@@ 
    @@@ 주의: -h, -v, -s, -t, -f 옵션은 동시에 실행되지 않으며 프로그램 작동 순서에 따라 한 가지만 실행됨.
    EOF2
}

sub version{
    print hear <<"    EOF3??";
    han - 알파벳-한글 변환기
    현재 버전: v0.3
    작성자: yesyesbike
    EOF3??
}

sub text_mode{
    $_ = join ' ', @_;
    hangul $_;
}

sub file_mode{
    for(@_){
        shift;
        open FILE, '<', $_;
        while(<FILE>){
            hangul $_;
        }
        close FILE;
    }
}

if(@ARGV){                  #프로그램 시작지점
    my %ar_gue;
    getopts("cf:hst:v", \%ar_gue);
    if($ar_gue{c}){
        $clipboard = 1;
    }

    if($ar_gue{h}){
        help;
    } elsif($ar_gue{v}){
        version;
    } elsif($ar_gue{s}){
        while(<>){
            chomp;
            hangul $_;
            print "\n";
        }
    } elsif($ar_gue{t}){
        text_mode($ar_gue{t});
    } elsif($ar_gue{f}){
        file_mode($ar_gue{f});
    }
} else {
    schell;
}
